# This pipeline deploys resources: resource group, storage account, key vault, and a sample secret
trigger:
 - none
#  branches:
#    include:
#    - master
#    - infrastra
#  paths:
#    include:
#    - infrastructure/* 

parameters:
- name: subscriptionId
  type: string
  default: '76d5aee2-6a43-4ec9-8248-77f888fb917c'
  displayName: Subscription ID (looks like a guid)
  values:
  - 76d5aee2-6a43-4ec9-8248-77f888fb917c
  - 9f241d6e-16e2-4b2b-a485-cc546f04799b
- name: projectName
  type: string
  default: 'project42'
  displayName: Short project name (about 10 chars, not spaces)
- name: location
  type: string
  default: 'westus2'
  displayName: 'Location (region in lowercase no spaces)'
  values:
  - westus2
- name: environment
  type: string
  default: 'dev'
  displayName: 'Environment - dev, prod, test, stag'
  values:
  - dev
  - prod
  - test
  - stag
- name: 'instanceNumber'
  type: string
  default: '00'
  displayName: 'Instance number (00-99)'
- name: team
  type: string
  default: 'gigeconomy'
  displayName: 'Team name (for tags)'
- name: azureResourceManagerConnection
  default: 'project42-int'
  displayName: 'Project settings | Pipeline | Service connections'
  type: string
  values: 
  - 'project42-int'
  - 'ResourceManager-connection'
- name: pathToResources
  default: 'infrastructure' #no trailing '/'
  type: string
  displayName: 'Path to the top infrastructure folder in the repo'
  values:
  - infrastructure
  - .
- name: storageSKU
  default: Standard_LRS
  type: string
  values:
  - Standard_LRS
  - Standard_GRS
  - Standard_RAGRS
  # not available in all regions: Standard_ZRS, Premium_LRS, Premium_ZRS, Standard_GZRS, Standard_RAGZRS
- name: objectId
  default: 'your object id goes here'
  displayName: "Object id of users to check deployment"
  values:
  - 'your object id goes here'
  - '31577d80-9c5b-4f62-b0b4-2000f11eca18' #bruce
- name: pipelineObjectId
  default: 'your pipeline object id goes here'
  values:
  - '7c691186-3a71-497a-a383-3cac844aa1ab' #azure pipeline object id
  - 'your pipeline object id goes here'


variables:
  instanceNumber: ${{ parameters.instanceNumber }}
  environment: ${{ parameters.environment }}
  CostCenter: 'project42'
  team: '${{ parameters.team }}'
  storageAccountType: ${{ parameters.storageSKU }}
  azureResourceManagerConnection: ${{ parameters.azureResourceManagerConnection }}
  pathToResources: ${{ parameters.pathToResources }}
  cosmosDBdatabaseName: 'cosmosdata'
  cosmosDBAccountName: 'cosmos-sql-${{ parameters.projectName }}-$(instanceNumber)'
  cosmosRegions: '[ "${{ parameters.location }}" ]' #json array
  location: '${{ parameters.location }}'
  tags: '{ "Location":"$(location)","Environment":"$(environment)","Team":"$(team)","Instance":"$(instanceNumber)" }'
  objectId: ${{ parameters.objectId }}
  testSecret: "testsecret7438290"

stages:
  - stage: DeployResources
    jobs:
    - job: 'DeployInfrastructure'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        projectName: ${{ parameters.projectName }}
        location: ${{ parameters.location }}
        resourceGroupName: ''
        secretPermissions: '["all"]'
        secureTestString: ''
      steps: 
        # GET NAME FOR RESOURCES
        - pwsh: |
            Write-Output 'subscription  ${{ parameters.subscriptionid }} -projectName  $(projectName) -environment $(environment) -instanceNumber $(instanceNumber) -resourceLocation $(location)'
            Write-Output 'pathToResource $(pathToResources)'
            Write-Output '$(tags)'
          displayName: 'show name convention variables'
        - task: PowerShell@2
          inputs:
            filePath: '$(pathToResources)/namingconvention/Get-ResourceBaseName.ps1'
            arguments: '-ProjectName $(projectName) -Environment $(environment) -InstanceNumber $(instanceNumber) -Location $(location) -IsStorage $false -ResourcePrefix "rg"'
        - pwsh: |
            Write-Output "resource name: $(resourceName)"
            Write-Output "##vso[task.setvariable variable=resourceGroupName;]$(resourceName)-shared-01"
            Write-Output "resource name group: $(resourceGroupName) : ${{ variables.resourceGroupName }}"
          displayName: 'Get resource name'
      # CREATE RESOURCE GROUP
        - pwsh: |
            Write-Output '-resourceGroupName $(resourceGroupName) -resourceGroupLocation $(location) '
            Write-Output '-resourceGroupTags $(tags)'
          displayName: "show resource group overrideParameters"
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Subscription'
            azureResourceManagerConnection: '$(azureResourceManagerConnection)'
            subscriptionId: ${{ parameters.subscriptionid }}
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/resourcegroup/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/resourcegroup/azuredeploy.parameters.json'
            overrideParameters: '-resourceGroupName  "$(resourceGroupName)" -resourceGroupLocation $(location) -resourceGroupTags $(tags)'
            deploymentMode: 'Incremental'
          displayName: "Create resource group"
        # overrideParameters: '-resourceGroupName $(resourceGroupName) -resourceGroupLocation $(location) -resourceGroupTags @{ ${{ variables.tags }} -lockResourceGroup $(lockResourceGroup) -principalId $(objectIdForResourceGroupContributors)}'
      # CREATE STORAGE ACCOUNT
        - task: PowerShell@2
          inputs:
            filePath: '$(pathToResources)/namingconvention/Get-ResourceBaseName.ps1'
            arguments: '-ProjectName $(projectName) -Environment $(environment) -InstanceNumber $(instanceNumber) -Location $(location) -IsStorage $true -ResourcePrefix "st"'
        - pwsh: 'Write-Output -resourceBaseName $(resourceName) -storageAccountType $(storageAccountType)'
          displayName: 'Get storage account resource name'
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: "Deploy storage account"
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(azureResourceManagerConnection)'
            subscriptionId: ${{ parameters.subscriptionid }}
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/storageaccount/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/storageaccount/azuredeploy.parameters.json'
            overrideParameters: '-resourceBaseName $(resourceName) -resourceTags $(tags)'
            deploymentMode: 'Incremental'
            deploymentOutputs: resourceOutput
          # overrideParameters: '-resourceBaseName $(resourceName) -storageAccountType $(storageAccountType)'
        - pwsh: Write-Output '$(resourceOutput)'
        - pwsh: |
            $armOutputObj =  ConvertFrom-Json '$(resourceOutput)'
            $armOutputObj.PSObject.Properties | ForEach-Object {
              $keyname = $_.Name
              $value = $_.Value.value
              Write-Output "keyname = [$keyname]  value = [$value]"
              Write-Output "##vso[task.setvariable variable=$keyName;]$value"
              Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value" 
            }
        - pwsh: |
            Write-Output '$(storageAccountName)'
            Write-Output '$(storageAccountResourceId)'
          displayName: 'Storage Account Name and id'
      # CREATE KEY VAULT ACCOUNT
        - task: PowerShell@2
          inputs:
            filePath: '$(pathToResources)/namingconvention/Get-ResourceBaseName.ps1'
            arguments: '-ProjectName $(projectName) -Environment $(environment) -InstanceNumber $(instanceNumber) -Location $(location) -IsStorage $false -ResourcePrefix kv'
          displayName: Key Vault Params
        - pwsh: Write-Output -resourceBaseName $(resourceName)
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: Resource Group
            azureResourceManagerConnection: $(azureResourceManagerConnection)
            subscriptionId: ${{ parameters.subscriptionid }}
            action: Create Or Update Resource Group
            resourceGroupName: $(resourceGroupName)
            location: $(location)
            templateLocation: Linked artifact
            csmFile: $(pathToResources)/keyvault/azuredeploy.json
            csmParametersFile: $(pathToResources)/keyvault/azuredeploy.parameters.json
            overrideParameters: '-vaultName $(resourceName) -resourceTags $(tags)'
            deploymentMode: Incremental
            deploymentOutputs: keyVaultOutput
          displayName: Deploy key vault
        - pwsh: Write-Output '$(keyVaultOutput)'
          displayName: Key vault json
        - pwsh: |
            $armOutputObj =  ConvertFrom-Json '$(keyVaultOutput)'
            $armOutputObj.PSObject.Properties | ForEach-Object {
              $keyname = $_.Name
              $value = $_.Value.value
              Write-Output "keyname = [$keyname]  value = [$value]"
              Write-Output "##vso[task.setvariable variable=$keyName;]$value"
              Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value" 
            }
          displayName: Key vault deployment results
        - pwsh: |
            Write-Output '$(keyVaultId)'
            Write-Output '$(vaultName)'
          displayName: Key vault deployment result items
      # CREATE COSMOSDB ACCOUNT
        - pwsh: |
            Write-Output '-accountName $(cosmosDBAccountName) -regions $(cosmosRegions) -databaseName $(cosmosDBdatabaseName)'
          displayName: Cosmos params
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Deploy CosmosDB account
          inputs:
            deploymentScope: Resource Group
            azureResourceManagerConnection: $(azureResourceManagerConnection)
            subscriptionId: ${{ parameters.subscriptionid }}
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/cosmosdb/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/cosmosdb/azuredeploy.parameters.json'
            overrideParameters: '-accountName $(cosmosDBAccountName) -regions $(cosmosRegions)  -databaseName $(cosmosDBdatabaseName) -resourceTags $(tags)'
            deploymentMode: 'Incremental'
            deploymentOutputs: resourceOutput
        - pwsh: Write-Output '$(resourceOutput)'
        - pwsh: |
            $armOutputObj =  ConvertFrom-Json '$(resourceOutput)'
            $armOutputObj.PSObject.Properties | ForEach-Object {
              $keyname = $_.Name
              $value = $_.Value.value
              Write-Output "keyname = [$keyname]  value = [$value]"
              Write-Output "##vso[task.setvariable variable=$keyName;]$value"
              Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value" 
            }
  # SET OBJECTID FOR DEVOPS PIPELINE
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Set permissions on keyvault
          inputs:
            deploymentScope: Resource Group
            azureResourceManagerConnection: $(azureResourceManagerConnection)
            subscriptionId: ${{ parameters.subscriptionid }}
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/keyvault.permissions/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/keyvault.permissions/azuredeploy.parameters.json'
            overrideParameters: '-keyVaultName $(vaultName) -objectId ${{ parameters.pipelineObjectId }} -secretsPermissions $(secretPermissions)'
            deploymentMode: 'Incremental'
            deploymentOutputs: resourceOutput

  # SET PERMISSIONS ON KEYVAULT
        - pwsh: |
            Write-Output '-keyVaultName $(vaultName) -objectId $(objectId) -secretsPermissions $(secretPermissions)'
          displayName: Permissions params
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Set permissions on keyvault
          inputs:
            deploymentScope: Resource Group
            azureResourceManagerConnection: $(azureResourceManagerConnection)
            subscriptionId: ${{ parameters.subscriptionid }}
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/keyvault.permissions/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/keyvault.permissions/azuredeploy.parameters.json'
            overrideParameters: '-keyVaultName $(vaultName) -objectId $(objectId) -secretsPermissions $(secretPermissions)'
            deploymentMode: 'Incremental'
            deploymentOutputs: resourceOutput
  # sample secret
        - pwsh: |
            $securedString = ConvertTo-SecureString -string $(testSecret) -AsPlainText -Force
            Write-Output '##vso[task.setvariable variable=secureTestString;isOutput=true]$securedString'
            Write-Output $securedString $(secureTestString)
          displayName: 
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: Set permissions on keyvault
          inputs:
            deploymentScope: Resource Group
            azureResourceManagerConnection: $(azureResourceManagerConnection)
            subscriptionId: ${{ parameters.subscriptionid }}
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(location)'
            templateLocation: 'Linked artifact'
            csmFile: '$(pathToResources)/keyvault.secret/azuredeploy.json'
            csmParametersFile: '$(pathToResources)/keyvault.secret/azuredeploy.parameters.json'
            overrideParameters: '-keyVaultName $(vaultName) -secretName "testsecret" -secretValue $(testSecret)'
            deploymentMode: 'Incremental'
            deploymentOutputs: resourceOutput
