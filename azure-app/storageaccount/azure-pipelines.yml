# Storage account create
# requires $(resourceGroupName), $(subscriptionId), $(location) to be set in interface
# requires resourceGroup to have been created

trigger:
- none

parameters:
  - name: subscriptionId
    type: string
    default: '76d5aee2-6a43-4ec9-8248-77f888fb917c'
    displayName: Subscription ID (looks like a guid)
    values:
    - 76d5aee2-6a43-4ec9-8248-77f888fb917c
    - 9f241d6e-16e2-4b2b-a485-cc546f04799b
  - name: 'resourceGroupName'
    displayName: 'Resource Group Name (resource group must exist)'
    type: string
    default: 'rg-wus2-project42-test-99'
  - name: 'location'
    displayName: 'Location'
    type: string
    default: 'westus2'
  - name: 'storageAccountName'
    displayName: "Storage Account Name"
    type: string
    default: "stwus2test990"
  - name: azureResourceManagerConnection
    default: 'Project42-int'
    displayName: 'Project settings | Pipeline | Service connections'
    type: string
    values: 
    - 'Project42-int'
    - 'ResourceManager-connection'
  - name: pathToResources
    default: 'infrastructure' #no trailing '/'
    type: string
    displayName: 'Path to the top infrastructure folder in the repo'
    values:
    - infrastructure
    - .
  - name: storageSKU
    default: Standard_LRS
    type: string
    values:
    - Standard_LRS
    - Standard_GRS
    - Standard_RAGRS
  # not available in all regions: Standard_ZRS, Premium_LRS, Premium_ZRS, Standard_GZRS, Standard_RAGZRS
#  - name: 'lockResourceGroup'
#    displayName: 'Lock'
#    type: boolean
#    default: $false
#  - name: 'contributorsObjectId'
#    displayName: 'Object ID for Contriburors'
#    type: string
#    default: ''

variables:
  tags: '{ "Location":"${{ parameters.location }}", "Environment":"test" }'
  storageAccountType: ${{ parameters.storageSKU }}
  azureResourceManagerConnection: '${{ parameters.azureResourceManagerConnection }}'
  pathToResources: '${{ parameters.pathToResources }}'
  resourceGroupName: ${{ parameters.resourceGroupName }}

pool:
  vmImage: 'ubuntu-latest'

steps:
  - pwsh: |
      Write-Output -resourceBaseName ${{ parameters.storageAccountName }} -storageAccountType $(storageAccountType) 
      Write-Output '$(tags)'
    displayName: 'Storage parameters'
# CREATE STORAGE ACCOUNT
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Deploy storage account"
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: '$(azureResourceManagerConnection)'
      subscriptionId: ${{ parameters.subscriptionid }}
      action: 'Create Or Update Resource Group'
      resourceGroupName: '$(resourceGroupName)'
      location: '${{ parameters.location }}'
      templateLocation: 'Linked artifact'
      csmFile: '$(pathToResources)/storageaccount/azuredeploy.json'
      csmParametersFile: '$(pathToResources)/storageaccount/azuredeploy.parameters.json'
      overrideParameters: '-resourceBaseName ${{ parameters.storageAccountName }} -storageAccountType $(storageAccountType) -resourceTags $(tags)'
      deploymentMode: 'Incremental'
      deploymentOutputs: resourceOutput
  - pwsh: Write-Output '$(resourceOutput)'
  - pwsh: |
      $armOutputObj =  ConvertFrom-Json '$(resourceOutput)'
      $armOutputObj.PSObject.Properties | ForEach-Object {
        $keyname = $_.Name
        $value = $_.Value.value
        Write-Output "keyname = [$keyname]  value = [$value]"
        Write-Output "##vso[task.setvariable variable=$keyName;]$value"
        Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value" 
      }
  - pwsh: |
      Write-Output '$(storageAccountName)'
      Write-Output '$(storageAccountResourceId)'
    displayName: 'Storage Account Name and id'