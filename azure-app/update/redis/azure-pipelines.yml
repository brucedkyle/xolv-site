# Redis create
# requires $(resourceGroupName), $(subscriptionId), $(location) to be set in interface
# requires resourceGroup to have been created


trigger:
  - none
 #  branches:
 #    include:
 #    - master
 #    - infrastra
 
 #  paths:
 #    include:
 #    - infrastructure/* 
 
parameters:
 - name: subscriptionId
   type: string
   default: '76d5aee2-6a43-4ec9-8248-77f888fb917c'
   displayName: Subscription ID (looks like a guid)
   values:
   - 76d5aee2-6a43-4ec9-8248-77f888fb917c
   - 9f241d6e-16e2-4b2b-a485-cc546f04799b
 - name: projectName
   type: string
   default: 'project42'
   displayName: Short project name (about 10 chars, not spaces)
 - name: resourceGroupName
   type: string
   default: rg-wus2-project42-test-99 #required to have been created already
 - name: location
   type: string
   default: 'westus2'
   displayName: 'Location (region in lowercase no spaces)'
   values:
   - westus2
 - name: environment
   type: string
   default: 'dev'
   displayName: 'Environment - dev, prod, test, stag'
   values:
   - dev
   - prod
   - test
   - stag
 - name: 'instanceNumber'
   type: string
   default: '00'
   displayName: 'Instance number (00-99)'
 - name: team
   type: string
   default: 'gigeconomy'
   displayName: 'Team name (for tags)'
 - name: azureResourceManagerConnection
   default: 'Project42-int'
   displayName: 'Project settings | Pipeline | Service connections'
   type: string
   values: 
   - 'Project42-int'
   - 'ResourceManager-connection'
 - name: pathToResources
   default: 'infrastructure' #no trailing '/'
   type: string
   displayName: 'Path to the top infrastructure folder in the repo'
   values:
   - infrastructure
   - .

variables:
  tags: '{ "Location":"${{ parameters.location }}", "Environment":"${{ parameters.environment }}" }'
  resourceName: 'redis-${{ parameters.location }}-${{ parameters.projectName }}-${{ parameters.environment }}-${{ parameters.instanceNumber }}'
  pathToResources: ${{ parameters.pathToResources }}

pool:
  vmImage: 'ubuntu-latest'

steps:
  - pwsh: |
      Write-Output -redisCacheName $(resourceName)
      Write-Output '$(tags)'
    displayName: 'Redis cache parameters'
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Deploy redis cache"
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: '${{ parameters.azureResourceManagerConnection }}'
      subscriptionId: ${{ parameters.subscriptionid }}
      action: 'Create Or Update Resource Group'
      resourceGroupName: ' ${{ parameters.resourceGroupName }}'
      location: '$(location)'
      templateLocation: 'Linked artifact'
      csmFile: '$(pathToResources)/redis/azuredeploy.json'
      csmParametersFile: '$(pathToResources)/redis/azuredeploy.parameters.json'
      overrideParameters: '-redisCacheName $(resourceName) -resourceTags $(tags)'
      deploymentMode: 'Incremental'
      deploymentOutputs: resourceOutput
  - pwsh: Write-Output '$(resourceOutput)'
  - pwsh: |
      $armOutputObj =  ConvertFrom-Json '$(resourceOutput)'
      $armOutputObj.PSObject.Properties | ForEach-Object {
        $keyname = $_.Name
        $value = $_.Value.value
        Write-Output "keyname = [$keyname]  value = [$value]"
        Write-Output "##vso[task.setvariable variable=$keyName;]$value"
        Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value" 
      }
    displayName: Redis deployment output